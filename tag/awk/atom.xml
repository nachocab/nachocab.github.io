<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
   
    <title>reasoniamhere.com - Tag: awk</title>
   
   <link>http://reasoniamhere.com</link>
   <description>I am a Spanish-born bioinformatics PhD student living in Boston</description>
   <language>en-us</language>
   <managingEditor>Nacho Caballero</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />

    
      <item>
        <title>A Hacker's Approach to Understanding French Spelling</title>
        <link>http://reasoniamhere.com/2013/11/14/a-hackers-approach-to-understanding-french-spelling</link>
        <author>Nacho Caballero</author>
        <pubDate>2013-11-14T00:00:00-05:00</pubDate>
        <guid>http://reasoniamhere.com/2013/11/14/a-hackers-approach-to-understanding-french-spelling</guid>
        <description><![CDATA[
           <p><img src="https://lh5.googleusercontent.com/-Ni7oJ-kyPZ0/UolG2TLQBII/AAAAAAAAGk0/8FHuV8Z_4yk/w700/IMG_20131117_194308.jpg" alt="Paroles"></p>

<p>Non-native French speakers like myself have a hard time grappling with the French spelling system. It may seem arbitrary to write <strong>seconde</strong> and pronounce it <strong>segond</strong>, or frustrating that there is no rule to define why <strong>déçu</strong> has an accent on the <strong>e</strong>, but <strong>reçu</strong> doesn&rsquo;t.</p>

<blockquote>
<p>C&#39;est la vie, mon ami.— say the French</p>
</blockquote>

<p>Now that I live in French Guiana, I am trying to come up with strategies to make these words easier to learn.</p>

<!--excerpt-->

<h2>Focus on the most common words</h2>

<p>Dictionaries sort words by alphabetical order, which is convenient if you are looking for a definition, but masochistic if you are trying to figure out which words are the important ones.</p>

<p>One way is to sort them by frequency of usage. You take a bunch of French text and you count how many times each words appears, then you sort them by their frequency. Common words like <strong>de</strong>, <strong>je</strong> and <strong>le</strong> appear at the very top, and words like <strong>macarron</strong>, <strong>compétiteur</strong> and an <strong>antisportif</strong> show up at the bottom.</p>

<p>You have to do some trickery to combine words that share the same stem (for example: <strong>enchanté</strong>, <strong>enchantée</strong>, <strong>enchantés</strong> and <strong>enchantées</strong>) so they all add up as the same word, but it&rsquo;s manageable. <a href="https://github.com/nachocab/french_experiments/blob/master/fr_frequency_stems.txt">Here</a> is my quick-and-dirty attempt to sort French words based on their usage (the file has four columns: stem, frequency, the most common word with that stem, that word without any accents (I use this column to play a <a href="https://github.com/nachocab/french_experiments/blob/master/play">guessing game</a>)).</p>

<p>Once you have that file, you can start enjoying some seriously fun language-geekery.</p>

<h2>Finding patterns amid the French chaos</h2>

<p>The White Whale of French accents has to be the <strong>é</strong>. Every French student knows that the <strong>participe passé</strong> of -er verbs like <strong>chanter</strong> ends in é (<strong>chanté</strong>), but what are the rules governing words like <strong>préféré</strong>, <strong>élève</strong>, or <strong>fréquence</strong>?</p>

<p>Some <a href="http://orthonet.sdv.fr/pages/informations_p6.html">sites</a> can tell you the multiple spelling rules with their corresponding multiple exceptions, but they are not very helpful because our brains are not wired to deal with detailed rules and exceptions. Besides, native French speakers don&rsquo;t study these rules. What we excel at is association and intuition. It&rsquo;s much easier to memorize the lyrics of a song than 100 random words.</p>

<h2>Divide and conquer</h2>

<p>I have always wanted to know if I should accent words that begin with <strong>e</strong>. In the past, I grabbed my <em>Petit Robert</em> and tried making a list of words that began with <strong>é</strong> and another of words that began with <strong>e</strong>. I then promptly went on to forget everything from both lists.</p>

<p>A better approach is to focus on a few common words each day and reverse engineer the spelling rules. To add another layer of association, you can group them by type of word: words that begin with <strong>é</strong>, words that contain two <strong>é</strong>s separated by a consonant, words that have an <strong>é</strong> in the second position. Pick whatever you are having trouble with.</p>

<h2>Focus on the exceptions: words that begin with é</h2>

<p>For example, I can use <a href="http://reasoniamhere.com/2013/09/16/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-1/">AWK</a> to grab all the words that start with either <strong>é</strong> or <strong>e</strong> and show their frequency:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk <span class="s1">&#39;$3 ~ &quot;^é&quot; &amp;&amp; $2 &gt; 500 {print $2, $3}&#39;</span> fr_frequency_stems.txt

<span class="m">170230</span> était
<span class="m">28392</span> écoute
<span class="m">12778</span> étrange
<span class="m">12660</span> école
<span class="m">10824</span> équipe
...
<span class="m">561</span> élite
<span class="m">543</span> épingle
<span class="m">538</span> éclaté
<span class="m">518</span> épicerie
<span class="m">501</span> écureuil
</code></pre></div>
<p>In total, there are 123 words, but they are not all equally important: <strong>école</strong> is 25 times more common than <strong>épicerie</strong>.</p>

<p>Let&rsquo;s see what words that start with <strong>e</strong> look like:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk <span class="s1">&#39;$3 ~ &quot;^e&quot; &amp;&amp; $2 &gt; 500 {print $2, $3}&#39;</span> fr_frequency_stems.txt

<span class="m">69775</span> encore
<span class="m">50094</span> entendu
<span class="m">42068</span> enfants
<span class="m">27877</span> entre
<span class="m">25380</span> elles
...
<span class="m">528</span> effraie
<span class="m">519</span> endommagé
<span class="m">509</span> edgar
<span class="m">508</span> estimé
<span class="m">506</span> endurer
</code></pre></div>
<p>There are around 200 commonly-used words that start with <strong>e</strong>. If we compare both lists we can see that no word that starts with <strong>é</strong> is followed by an <strong>x</strong>, an <strong>s</strong>, or a double consonant (<strong>ll</strong>, <strong>rr</strong>, <strong>ff</strong>).</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk <span class="s1">&#39;$3 ~ &quot;^é[xs]|^é(ll|rr|ff)&quot; &amp;&amp; $2 &gt; 500 {print $2, $3}&#39;</span> fr_frequency_stems.txt <span class="p">|</span> wc -l

<span class="m">0</span> <span class="c"># extra essai ellipse erreur effacer ...</span>
</code></pre></div>
<p>We can also see that words that start with <strong>e</strong> seem to be followed by <strong>n</strong> or <strong>m</strong>, and that only a handful of words break this rule:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk <span class="s1">&#39;$3 ~ &quot;^e[nm]&quot; &amp;&amp; $2 &gt; 500 {print $2, $3}&#39;</span> fr_frequency_stems.txt <span class="p">|</span> wc -l
<span class="m">108</span> <span class="c"># ex: entendu enfants entre ensemble endroit ...</span>
...

awk <span class="s1">&#39;$3 ~ &quot;^é[nm]&quot; &amp;&amp; $2 &gt; 500 {print $2, $3}&#39;</span> fr_frequency_stems.txt

<span class="m">3661</span> énorme
<span class="m">3193</span> énergie
<span class="m">2474</span> énerve
<span class="m">2344</span> émission
<span class="m">2229</span> émotions
</code></pre></div>
<p>The words that break the <strong>n/m</strong> rule contain an <strong>é</strong> that is pronounced by itself (it forms its own syllable), unlike the rest of <em>en/em</em> words. You should focus your memorization efforts on these outcasts and assume that the remaining words follow the rule.</p>

<h2>Guess wisely: words with é in the second position</h2>

<p>We can use a similar approach to look at words that have <strong>é</strong> in the second position:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk <span class="s1">&#39;$3 ~ &quot;^.é&quot; &amp;&amp; $2 &gt; 500 {print $3}&#39;</span> fr_frequency_stems.txt <span class="p">|</span> cut -c2 <span class="p">|</span> sort <span class="p">|</span> uniq -c <span class="p">|</span> sort -k1,1gr
    <span class="m">113</span> dé
     <span class="m">64</span> ré
     <span class="m">19</span> mé
     <span class="m">16</span> sé
     <span class="m">15</span> pé
     <span class="m">10</span> hé
      <span class="m">9</span> lé
      <span class="m">8</span> gé
      <span class="m">8</span> né
      <span class="m">7</span> bé
      <span class="m">7</span> té
      <span class="m">7</span> vé
      <span class="m">6</span> cé
      <span class="m">6</span> fé
</code></pre></div>
<p>Holy Molly! This breakdown shows that words that begin with <strong>dé</strong> or <strong>ré</strong> make up 60% of the common words that have é in the second position ((113 + 64) / 300). Let&rsquo;s focus on those two.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk <span class="s1">&#39;$3 ~ &quot;^de&quot; &amp;&amp; $2 &gt; 500 {print $3}&#39;</span> fr_frequency_stems.txt <span class="p">|</span> wc -l
62

awk <span class="s1">&#39;$3 ~ &quot;^re&quot; &amp;&amp; $2 &gt; 500 {print $3}&#39;</span> fr_frequency_stems.txt <span class="p">|</span> wc -l
152
</code></pre></div>
<p>Well, that&rsquo;s interesting. There are twice as many <strong>dé</strong> words than <strong>de</strong> words, but there are twice as many <strong>re</strong> words as there are <strong>ré</strong> words. This means that if you are not sure how to accent a word you should guess <strong>dé</strong> and <strong>re</strong>.</p>

<p>Unfortunately there doesn&rsquo;t seem to be any obvious rules that we can follow to determine if these words should have <strong>é</strong> or <strong>e</strong>, so we will have to come up with our own associations.</p>

<p>For example, memorizing words that look alike is easier if we focus on their differences rather than if we learn them independently:</p>

<blockquote>
<p>début - debout</p>

<p>désert - dessert</p>

<p>démarrer - demander</p>

<p>détruire - destruction</p>

<p>déssigner - design</p>
</blockquote>

<p>You can also make up memorable stories:</p>

<blockquote>
<p>La secrétaire a gardé l&#39;accent de secret</p>
</blockquote>

<p>There are hundreds of little tricks but this post has gone on long enough. I hope this approach makes your studying more effective. Let me know how it goes and share your own strategies in the comments.</p>

<p>UPDATE: Regarding a few comments on <a href="http://www.reddit.com/r/French/comments/1qw1a6/a_hackers_approach_to_understanding_french/">Reddit</a> The diacritics are there to change the pronunciation, but non-native speakers don&rsquo;t always know if a word should be pronounced é or e. I don&rsquo;t know if it&rsquo;s because I&rsquo;m Spanish, but I&rsquo;m tempted to want to say <strong>sécret</strong> (just like <strong>sécurité</strong>) instead of <strong>secret</strong>. If I know how <strong>secret</strong> is written, I can make an effort to pronounce it properly; other times I will use my knowledge of how it&rsquo;s pronounced to write it properly. It&rsquo;s a two-prong approach.</p>

        ]]></description>
      </item>
    
      <item>
        <title>AWK GTF! How to Analyze a Transcriptome Like a Pro - Part 3</title>
        <link>http://reasoniamhere.com/2013/09/18/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-3</link>
        <author>Nacho Caballero</author>
        <pubDate>2013-09-18T00:00:00-04:00</pubDate>
        <guid>http://reasoniamhere.com/2013/09/18/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-3</guid>
        <description><![CDATA[
           <p>This post belongs to a 3-part series on AWK: <a href="http://reasoniamhere.com/2013/09/16/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-1">Part 1</a> - <a href="http://reasoniamhere.com/2013/09/17/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-2">Part 2</a> - <strong>Part 3</strong></p>

<p>We finished <a href="http://reasoniamhere.com/2013/09/17/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-2">Part 2</a> by creating an associative array, increasing the value of each of its keys for every line that contained a matching key, and used the <code>END</code> rule to print each key&rsquo;s final count.</p>

<!--excerpt-->

<p>In this post, we will apply the translator pattern to turn the gene symbols used in the <a href="http://reasoniamhere.com/2013/09/16/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-1/#get_the_data">transcriptome</a> we have been working with into official <a href="http://www.genenames.org/cgi-bin/hgnc_stats">HGNC symbols</a>.</p>

<h2>Calling AWK with an external file</h2>

<p>We have been calling AWK directly from the command line, but this approach can be limiting sometimes. The alternative is to use the <code>-f</code> option to tell AWK where the code is (in this case, in the <code>source_counter.awk</code> file).</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># create the instructions for AWK</span>
<span class="nb">echo</span> <span class="s1">&#39;NR &gt; 5 {</span>
<span class="s1">    source_counter[$2] += 1</span>
<span class="s1">}</span>

<span class="s1">END {</span>
<span class="s1">    for (source_name in source_counter){</span>
<span class="s1">        print source_name, source_counter[source_name]</span>
<span class="s1">    }</span>
<span class="s1">}&#39;</span> &gt; source_counter.awk

<span class="c"># run AWK</span>
awk -f source_counter.awk transcriptome.gtf

HAVANA 2257550
ENSEMBL 357012
</code></pre></div>
<p><code>NR</code> is a special variable that contains the current line number (AWK calls lines records, which explains the R). <code>NR &gt; 5</code> tells AWK to execute the code between the curly braces only when the line number is greater than 5, so it skips the first 5 lines. We do this to get rid of the header lines that appear at the beginning of the Gencode transcriptome file.</p>

<p>Remember you still have to provide AWK with an input file (<code>transcriptome.gtf</code>) or use a pipe (<code>cat transcriptome.gtf | awk -f source_counter.awk</code>). If you don&rsquo;t, AWK will just sit there quietly until it receives an input that will never arrive. This is bound to happen to you at some point; when it does, press <code>ctrl c</code>, smack your forehead and start again.</p>

<h2>Splitting strings</h2>

<p>The following two commands create the files that we will use for the rest of the post. Run them so you can play along.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s1">&#39;</span>
<span class="s1">ZYX_CTSL 40</span>
<span class="s1">WVU_CTSV 21</span>
<span class="s1">TSR_MYCL 11</span>
<span class="s1">QPO_KMT2A 155</span>
<span class="s1">NML_HSP90AB1 36</span>
<span class="s1">KJI_CAPN7 52</span>
<span class="s1">HGF_DACH2 84</span>
<span class="s1">EDC_IFNA14 1&#39;</span> &gt; exon_counts.txt

<span class="c"># the format of the translator is UNOFFICIAL_GENE_NAME OFFICIAL_GENE_NAME</span>
<span class="nb">echo</span> <span class="s1">&#39;</span>
<span class="s1">CTSL CTSL1</span>
<span class="s1">FLJ31037 CTSL1</span>
<span class="s1">MGC125957 CTSL2</span>
<span class="s1">CTSU CTSL2</span>
<span class="s1">CTSV CTSL2</span>
<span class="s1">CATL2 CTSL2</span>
<span class="s1">MYCL MYCL1</span>
<span class="s1">LMYC MYCL1</span>
<span class="s1">KMT2A MLL</span>
<span class="s1">ALL-1 MLL</span>
<span class="s1">HTRX1 MLL</span>
<span class="s1">KMT2A MLL</span>
<span class="s1">CXXC7 MLL</span>
<span class="s1">TET1-MLL MLL</span>
<span class="s1">MLL1A MLL</span>
<span class="s1">FLJ11783 MLL&#39;</span> &gt; translator.txt
</code></pre></div>
<p>Imagine that you found <code>exon_counts.txt</code> in the supplementary materials section of a paper from a rival lab, and you want to compare their results with yours. Unfortunately, they seem to enjoy prepending their gene symbols with a strange (but vaguely familiar) code followed by an underscore. How do we get rid of it?</p>

<p>AWK to the rescue. We can use <code>split</code>, one of its <a href="http://www.gnu.org/software/gawk/manual/html_node/String-Functions.html">functions</a> to manipulate strings:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s2">&quot;HOLY-GUACAMOLE&quot;</span> <span class="p">|</span> awk <span class="s1">&#39;{ split($1, words, &quot;-&quot;); print words[2] }&#39;</span> <span class="c"># GUACAMOLE</span>
<span class="nb">echo</span> <span class="s2">&quot;HOLY-GUACAMOLE&quot;</span> <span class="p">|</span> awk <span class="s1">&#39;{ split($1, words, &quot;-&quot;); print words[1] }&#39;</span> <span class="c"># HOLY</span>
<span class="nb">echo</span> <span class="s2">&quot;HOLY-GUACAMOLE-CHIMICHANGA&quot;</span> <span class="p">|</span> awk <span class="s1">&#39;</span>
<span class="s1">{</span>
<span class="s1">    split($1, words, &quot;-&quot;)</span>
<span class="s1">    print &quot;I would like&quot;, words[2], &quot;in my&quot;, words[3] &quot;, please&quot;</span>
<span class="s1">}&#39;</span> <span class="c"># I would like GUACAMOLE in my CHIMICHANGA, please</span>
</code></pre></div>
<p>Its first argument is the <strong>string</strong> that we want to split, the second is the name of the <strong>array</strong> variable that will contain the pieces of the string that we split, and the third is the <strong>delimiter</strong> that we want to use to separate the string into pieces. In this case, we chose to call the array variable <code>words</code>. An array can be considered as a special case of the associative array, where the keys are numbers, instead of words.</p>

<p>The semicolon in the first two commands is just a way to be lazy and write more than one function (<code>split</code>, <code>print</code>) in the same line.</p>

<p>Notice a small subtlety hidden among the Tex-Mex: there is no comma between <code>words[3]</code> and <code>&quot;, please&quot;</code>. If there was, the output would be <code>CHIMICHANGA , please</code>. Because there is no comma, AWK simply appends the two strings without inserting the default output separator (the space).</p>

<p>Now we are ready to get rid of the reverse-alphabetical madness.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk <span class="s1">&#39;{</span>
<span class="s1">    split($1, words, &quot;_&quot;)</span>
<span class="s1">    print words[2], $2</span>
<span class="s1">}&#39;</span> exon_counts.txt &gt; exon_counts2.txt

cat exon_counts2.txt

CTSL 40
CTSV 21
MYCL 11
KMT2A 155
HSP90AB1 36
CAPN7 52
DACH2 84
IFNA14 1
</code></pre></div>
<h2>Building a translation dictionary</h2>

<p>Watch the magic unfold:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk -v <span class="nv">translations_file</span><span class="o">=</span><span class="s2">&quot;translator.txt&quot;</span> <span class="s1">&#39;</span>
<span class="s1">BEGIN{</span>
<span class="s1">    while (getline &lt; translations_file) {</span>
<span class="s1">        translations[$1] = $2</span>
<span class="s1">    }</span>
<span class="s1">    close(translations_file)</span>
<span class="s1">}</span>

<span class="s1">{</span>
<span class="s1">    if (translations[$1] != &quot;&quot;){</span>
<span class="s1">       $1 = translations[$1]</span>
<span class="s1">       $3 = &quot;translated&quot;</span>
<span class="s1">    } else {</span>
<span class="s1">       $3 = &quot;untranslated&quot;</span>
<span class="s1">    }</span>
<span class="s1">   print</span>
<span class="s1">}&#39;</span> exon_counts2.txt

<span class="c"># output</span>
CTSL1 <span class="m">40</span> translated
CTSL2 <span class="m">21</span> translated
MYCL1 <span class="m">11</span> translated
MLL <span class="m">155</span> translated
HSP90AB1 <span class="m">36</span> untranslated
CAPN7 <span class="m">52</span> untranslated
DACH2 <span class="m">84</span> untranslated
IFNA14 <span class="m">1</span> untranslated
</code></pre></div>
<p>I always have to look up the exact syntax for the translator pattern because I never remember, but it&rsquo;s so useful that I keep it in an easily accessible <a href="https://github.com/nachocab/tips_and_tricks/blob/master/bash_tricks.sh">text file</a>, along with all the other useful-but-impossible-to-remember commands.</p>

<p>A lot is going on here.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk -v <span class="nv">translations_file</span><span class="o">=</span><span class="s2">&quot;translator.txt&quot;</span> <span class="s1">&#39;...&#39;</span> exon_counts2.txt
</code></pre></div>
<p>The <code>-v</code> option is used to create variables that can be used by AWK in the code that goes between the single quotes. In this case we are creating a variable called <code>translations_file</code> with value <code>&quot;translator.txt&quot;</code>. Due to the Holy UNIX Commandments, no spaces are allowed around the equals sign (this rule doesn&rsquo;t apply inside AWK, though).</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">BEGIN<span class="o">{</span> ... <span class="o">}</span>
</code></pre></div>
<p>The <code>BEGIN</code> rule does the opposite of the <code>END</code> rule: it is true before the input file (<code>exon_counts2.txt</code>) is read, and false thereafter.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">while</span> <span class="o">(</span>condition<span class="o">)</span> <span class="o">{</span> ... <span class="o">}</span>
</code></pre></div>
<p>Similar to the <code>for</code> loop that we saw in the previous post, there is also a <code>while</code> loop, which runs until the condition between the parentheses stops being true.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">while</span> <span class="o">(</span>getline &lt; translations_file<span class="o">)</span> <span class="o">{</span>
    translations<span class="o">[</span><span class="nv">$1</span><span class="o">]</span> <span class="o">=</span> <span class="nv">$2</span>
<span class="o">}</span>
close<span class="o">(</span>translations_file<span class="o">)</span>
</code></pre></div>
<p><code>getline &lt; some_file</code> is an <a href="http://www.gnu.org/software/gawk/manual/html_node/Getline.html#Getline">internal</a> AWK command that lets you read the next line from a different file than the standard input file. After the line is read, the dollar <code>$</code> variables are updated, so we can use <code>$1</code> and <code>$2</code> just like we usually do. The file must then be closed to avoid angering the UNIX gods.</p>

<p><em>NOTE</em>: There is a lot of wizardry that surrounds the <code>getline</code> command. Ninety percent of the time, the translator pattern is enough. If you want to do fancier stuff, like using a translator file with a different input delimiter than the one used by the input file, it&rsquo;s worth spending an hour reading the <a href="http://www.gnu.org/software/gawk/manual/html_node/Getline.html#Getline">documentation</a> to understand all the nitty-gritties.</p>

<p><code>translations</code> is an associative array that has the bad gene symbols as keys, and the official gene symbols as values. The <code>translator.txt</code> file doesn&rsquo;t have any repeats in column one, so we can be sure that each bad symbol only has one good translation. But our toy translator file doesn&rsquo;t have all the gene symbols that appear in <code>exon_counts2.txt</code> (HSP90AB1 is missing, for example).</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">if</span> <span class="o">(</span>translations<span class="o">[</span><span class="nv">$1</span><span class="o">]</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="o">){</span>
   <span class="nv">$1</span> <span class="o">=</span> translations<span class="o">[</span><span class="nv">$1</span><span class="o">]</span>
   <span class="nv">$3</span> <span class="o">=</span> <span class="s2">&quot;translated&quot;</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
   <span class="nv">$3</span> <span class="o">=</span> <span class="s2">&quot;untranslated&quot;</span>
<span class="o">}</span>
</code></pre></div>
<p>We check this by using an <code>if</code> statement, which only executes the code inside the braces if what is between the parentheses is true. In our example, <code>translations[$1]</code> will equal the empty string <code>&quot;&quot;</code> for genes genes that don&rsquo;t have a translation. In those cases, we won&rsquo;t overwrite <code>$1</code>.</p>

<p>The <code>print</code> command without any arguments prints all the fields (AWK calls columns <strong>fields</strong>), including the one we created to know if the gene was translated or not.</p>

<p><hr></p>

<p>I hope this series got you interested in learning more about AWK. From personal experience, once you grok it, you want to use it everywhere. There is a megaton of material we didn&rsquo;t cover, but here is a <a href="http://www.catonmat.net/blog/awk-one-liners-explained-part-one/">great link</a> with many handy AWK one-liners. Feel free to get back to me if you have any questions.</p>

        ]]></description>
      </item>
    
      <item>
        <title>AWK GTF! How to Analyze a Transcriptome Like a Pro - Part 2</title>
        <link>http://reasoniamhere.com/2013/09/17/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-2</link>
        <author>Nacho Caballero</author>
        <pubDate>2013-09-17T00:00:00-04:00</pubDate>
        <guid>http://reasoniamhere.com/2013/09/17/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-2</guid>
        <description><![CDATA[
           <p>This post belongs to a 3-part series on AWK: <a href="http://reasoniamhere.com/2013/09/16/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-1">Part 1</a> - <strong>Part 2</strong> - <a href="http://reasoniamhere.com/2013/09/18/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-3">Part 3</a></p>

<p>Back in <a href="http://reasoniamhere.com/2013/09/16/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-1">Part 1</a>, we learned how to tell AWK to select specific lines from a tab-separated <a href="http://reasoniamhere.com/2013/09/16/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-1/#get_the_data">transcriptome file</a> (using the rule <code>&#39;$3 == &quot;gene&quot;&#39;</code>) and return a specific column (using the <code>print</code> statement inside the curly braces <code>{ }</code>).</p>

<p>In this post, we are going to count how many exons make up each protein-coding gene.</p>

<!--excerpt-->

<h2>Chaining AWK calls</h2>

<p>We will start with the AWK call that we were using before, and we will append a pipe <code>|</code> so it can be used as input for the next AWK call, this time using a space and a semicolon as the delimiter to define what a column is:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk -F <span class="s2">&quot;\t&quot;</span> <span class="s1">&#39;$3 == &quot;gene&quot; { print $9 }&#39;</span> transcriptome.gtf <span class="p">|</span> awk -F <span class="s2">&quot;; &quot;</span> <span class="s1">&#39;{ print $3 }&#39;</span> <span class="p">|</span> head <span class="p">|</span> less -S

gene_type <span class="s2">&quot;pseudogene&quot;</span>
gene_type <span class="s2">&quot;pseudogene&quot;</span>
gene_type <span class="s2">&quot;lincRNA&quot;</span>
gene_type <span class="s2">&quot;lincRNA&quot;</span>
gene_type <span class="s2">&quot;pseudogene&quot;</span>
gene_type <span class="s2">&quot;pseudogene&quot;</span>
gene_type <span class="s2">&quot;protein_coding&quot;</span>
gene_type <span class="s2">&quot;lincRNA&quot;</span>
gene_type <span class="s2">&quot;lincRNA&quot;</span>
gene_type <span class="s2">&quot;pseudogene&quot;</span>
</code></pre></div>
<p>Now that we see what the third column looks like, we can filter for protein-coding genes</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk -F <span class="s2">&quot;\t&quot;</span> <span class="s1">&#39;$3 == &quot;gene&quot; { print $9 }&#39;</span> transcriptome.gtf <span class="p">|</span> <span class="se">\</span>
awk -F <span class="s2">&quot;; &quot;</span> <span class="s1">&#39;$3 == &quot;gene_type \&quot;protein_coding\&quot;&quot;&#39;</span> <span class="p">|</span> <span class="se">\</span>
head <span class="p">|</span> less -S

gene_id <span class="s2">&quot;ENSG00000186092.4&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000186092.4&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;OR4F5&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;OR4F5&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000001094.1&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000237683.5&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000237683.5&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;AL627309.1&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;AL627309.1&quot;</span><span class="p">;</span> level 3<span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000235249.1&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000235249.1&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;OR4F29&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;OR4F29&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000002860.1&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000185097.2&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000185097.2&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;OR4F16&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;OR4F16&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000002581.1&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000269831.1&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000269831.1&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;AL669831.1&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;AL669831.1&quot;</span><span class="p">;</span> level 3<span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000269308.1&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000269308.1&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;AL645608.2&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;AL645608.2&quot;</span><span class="p">;</span> level 3<span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000187634.6&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000187634.6&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;SAMD11&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;SAMD11&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000040719.8&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000268179.1&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000268179.1&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;AL645608.1&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;AL645608.1&quot;</span><span class="p">;</span> level 3<span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000188976.6&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000188976.6&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;NOC2L&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;NOC2L&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000040720.1&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000187961.9&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000187961.9&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;KLHL17&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;KLHL17&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000040721.6&quot;</span><span class="p">;</span>
</code></pre></div>
<p>I added a space and a backslash <code>\</code> (not to be confused with the regular slash <code>/</code>) after the first and second pipes to split the code into two lines; this makes it easier to read and it highlights that we are taking two separate steps.</p>

<p>The double quotes around <code>protein_coding</code> are escaped (also with a backslash <code>\&quot;</code>) because they are already contained inside double quotes. To avoid the backslashing drama we can use the partial matching operator <code>~</code> instead of the total equality operator <code>==</code>.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk -F <span class="s2">&quot;\t&quot;</span> <span class="s1">&#39;$3 == &quot;gene&quot; { print $9 }&#39;</span> transcriptome.gtf <span class="p">|</span> <span class="se">\</span>
awk -F <span class="s2">&quot;; &quot;</span> <span class="s1">&#39;$3 ~ &quot;protein_coding&quot;&#39;</span> <span class="p">|</span> <span class="se">\</span>
head <span class="p">|</span> less -S
</code></pre></div>
<p>The output is the same as before: those lines that contain a <code>protein_coding</code> somewhere in their third column make the partial matching rule true, and they get printed (which is the default behavior when there are no curly braces).</p>

<p>Now we have all the protein-coding genes, but how do we get to the genes that only have one exon? Well, we have to revisit our initial AWK call: we selected lines that corresponded to genes, but we actually want lines that correspond to <em>exons</em>. That&rsquo;s an easy fix, we just change the word &ldquo;gene&rdquo; for the word &ldquo;exon&rdquo;. Everything else stays the same.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk -F <span class="s2">&quot;\t&quot;</span> <span class="s1">&#39;$3 == &quot;exon&quot; { print $9 }&#39;</span> transcriptome.gtf <span class="p">|</span> <span class="se">\</span>
awk -F <span class="s2">&quot;; &quot;</span> <span class="s1">&#39;$3 ~ &quot;protein_coding&quot;&#39;</span> <span class="p">|</span> <span class="se">\</span>
head <span class="p">|</span> less -S

gene_id <span class="s2">&quot;ENSG00000186092.4&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENST00000335137.3&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;OR4F5&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;OR4F5-001&quot;</span><span class="p">;</span> exon_number 1<span class="p">;</span>  exon_id <span class="s2">&quot;ENSE00002319515.1&quot;</span><span class="p">;</span>  level 2<span class="p">;</span> tag <span class="s2">&quot;basic&quot;</span><span class="p">;</span> tag <span class="s2">&quot;CCDS&quot;</span><span class="p">;</span> ccdsid <span class="s2">&quot;CCDS30547.1&quot;</span><span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000001094.1&quot;</span><span class="p">;</span> havana_transcript <span class="s2">&quot;OTTHUMT00000003223.1&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000237683.5&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENST00000423372.3&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;AL627309.1&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;AL627309.1-201&quot;</span><span class="p">;</span> exon_number 1<span class="p">;</span>  exon_id <span class="s2">&quot;ENSE00002221580.1&quot;</span><span class="p">;</span>  level 3<span class="p">;</span> tag <span class="s2">&quot;basic&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000237683.5&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENST00000423372.3&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;AL627309.1&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;AL627309.1-201&quot;</span><span class="p">;</span> exon_number 2<span class="p">;</span>  exon_id <span class="s2">&quot;ENSE00002314092.1&quot;</span><span class="p">;</span>  level 3<span class="p">;</span> tag <span class="s2">&quot;basic&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000235249.1&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENST00000426406.1&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;OR4F29&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;OR4F29-001&quot;</span><span class="p">;</span> exon_number 1<span class="p">;</span>  exon_id <span class="s2">&quot;ENSE00002316283.1&quot;</span><span class="p">;</span>  level 2<span class="p">;</span> tag <span class="s2">&quot;basic&quot;</span><span class="p">;</span> tag <span class="s2">&quot;CCDS&quot;</span><span class="p">;</span> ccdsid <span class="s2">&quot;CCDS41220.1&quot;</span><span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000002860.1&quot;</span><span class="p">;</span> havana_transcript <span class="s2">&quot;OTTHUMT00000007999.1&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000185097.2&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENST00000332831.2&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;OR4F16&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;OR4F16-001&quot;</span><span class="p">;</span> exon_number 1<span class="p">;</span>  exon_id <span class="s2">&quot;ENSE00002324228.1&quot;</span><span class="p">;</span>  level 2<span class="p">;</span> tag <span class="s2">&quot;basic&quot;</span><span class="p">;</span> tag <span class="s2">&quot;CCDS&quot;</span><span class="p">;</span> ccdsid <span class="s2">&quot;CCDS41221.1&quot;</span><span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000002581.1&quot;</span><span class="p">;</span> havana_transcript <span class="s2">&quot;OTTHUMT00000007334.1&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000269831.1&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENST00000599533.1&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;AL669831.1&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;AL669831.1-201&quot;</span><span class="p">;</span> exon_number 1<span class="p">;</span>  exon_id <span class="s2">&quot;ENSE00003063549.1&quot;</span><span class="p">;</span>  level 3<span class="p">;</span> tag <span class="s2">&quot;basic&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000269831.1&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENST00000599533.1&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;AL669831.1&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;AL669831.1-201&quot;</span><span class="p">;</span> exon_number 2<span class="p">;</span>  exon_id <span class="s2">&quot;ENSE00003084653.1&quot;</span><span class="p">;</span>  level 3<span class="p">;</span> tag <span class="s2">&quot;basic&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000269831.1&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENST00000599533.1&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;AL669831.1&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;AL669831.1-201&quot;</span><span class="p">;</span> exon_number 3<span class="p">;</span>  exon_id <span class="s2">&quot;ENSE00003138540.1&quot;</span><span class="p">;</span>  level 3<span class="p">;</span> tag <span class="s2">&quot;basic&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000269308.1&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENST00000594233.1&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;AL645608.2&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;AL645608.2-201&quot;</span><span class="p">;</span> exon_number 1<span class="p">;</span>  exon_id <span class="s2">&quot;ENSE00003079649.1&quot;</span><span class="p">;</span>  level 3<span class="p">;</span> tag <span class="s2">&quot;basic&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000269308.1&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENST00000594233.1&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;AL645608.2&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;AL645608.2-201&quot;</span><span class="p">;</span> exon_number 2<span class="p">;</span>  exon_id <span class="s2">&quot;ENSE00003048391.1&quot;</span><span class="p">;</span>  level 3<span class="p">;</span> tag <span class="s2">&quot;basic&quot;</span><span class="p">;</span>
</code></pre></div>
<h2>Cleaning up the output</h2>

<p>Before we try to count how many exons belong to the same protein-coding gene, let&rsquo;s simplify the output so we only get the gene names (which are in column 5).</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk -F <span class="s2">&quot;\t&quot;</span> <span class="s1">&#39;$3 == &quot;exon&quot; { print $9 }&#39;</span> transcriptome.gtf <span class="p">|</span> <span class="se">\</span>
awk -F <span class="s2">&quot;; &quot;</span> <span class="s1">&#39;$3 ~ &quot;protein_coding&quot; {print $5}&#39;</span> <span class="p">|</span> <span class="se">\</span>
head

gene_name <span class="s2">&quot;OR4F5&quot;</span>
gene_name <span class="s2">&quot;AL627309.1&quot;</span>
gene_name <span class="s2">&quot;AL627309.1&quot;</span>
gene_name <span class="s2">&quot;OR4F29&quot;</span>
gene_name <span class="s2">&quot;OR4F16&quot;</span>
gene_name <span class="s2">&quot;AL669831.1&quot;</span>
gene_name <span class="s2">&quot;AL669831.1&quot;</span>
gene_name <span class="s2">&quot;AL669831.1&quot;</span>
gene_name <span class="s2">&quot;AL645608.2&quot;</span>
gene_name <span class="s2">&quot;AL645608.2&quot;</span>
</code></pre></div>
<p>This is sort of what we want. We could chain another AWK call using <code>-F &quot; &quot;</code>, and pick the second column (which would get rid of the <code>gene_name</code>). Feel free to try that approach if you are curious.</p>

<p>We can also take a shortcut by using the <code>tr -d</code> command, which deletes whatever characters appear in double quotes. For example, to remove every vowel from a sentence:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s2">&quot;This unix thing is cool&quot;</span> <span class="p">|</span> tr -d <span class="s2">&quot;aeiou&quot;</span> <span class="c"># Ths nx thng s cl</span>
</code></pre></div>
<p>Let&rsquo;s try deleting all the semicolons and quotes before the second AWK call:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk -F <span class="s2">&quot;\t&quot;</span> <span class="s1">&#39;$3 == &quot;exon&quot; { print $9 }&#39;</span> transcriptome.gtf <span class="p">|</span> <span class="se">\</span>
tr -d <span class="s2">&quot;;\&quot;&quot;</span> <span class="p">|</span> <span class="se">\</span>
awk -F <span class="s2">&quot; &quot;</span> <span class="s1">&#39;$6 == &quot;protein_coding&quot; {print $10}&#39;</span> <span class="p">|</span> <span class="se">\</span>
head

OR4F5
AL627309.1
AL627309.1
OR4F29
OR4F16
AL669831.1
AL669831.1
AL669831.1
AL645608.2
AL645608.2
</code></pre></div>
<p>Run <code>awk -F &quot;\t&quot; &#39;$3 == &quot;exon&quot; { print $9 }&#39; transcriptome.gtf | tr -d &quot;;\&quot;&quot; | head</code> to understand what the input to the second AWK call looks like. It&rsquo;s just words separated by spaces; the sixth word corresponds to the gene type, and the tenth word to the gene name.</p>

<h2>Counting genes</h2>

<p>There is one more concept we need to introduce before we start counting. AWK uses a special rule called <code>END</code>, which is only true once the input is over. See an example:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> -e <span class="s2">&quot;a\na\nb\nb\nb\nc&quot;</span> <span class="p">|</span> <span class="se">\</span>
awk <span class="s1">&#39;</span>
<span class="s1">    { print $1 }</span>

<span class="s1">END { print &quot;Done with letters!&quot; }</span>
<span class="s1">&#39;</span>

a
a
b
b
b
c
Done with letters!
</code></pre></div>
<p>The <code>-e</code> option tells <code>echo</code> to convert each <code>\n</code> into a new line, which is a convenient way of printing multiple lines from a single character string.</p>

<p>In AWK, any amount of whitespace is allowed between the initial and the final quote <code>&#39;</code>. I separated the first rule from the <code>END</code> rule to make them easier to read.</p>

<p>Now we are ready for counting.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> -e <span class="s2">&quot;a\na\nb\nb\nb\nc&quot;</span> <span class="p">|</span> <span class="se">\</span>
awk <span class="s1">&#39;</span>
<span class="s1">    { counter[$1] += 1 }</span>

<span class="s1">END {</span>
<span class="s1">    for (letter in counter){</span>
<span class="s1">        print letter, counter[letter]</span>
<span class="s1">    }</span>
<span class="s1">}</span>
<span class="s1">&#39;</span>

a 2
b 3
c 1
</code></pre></div>
<p>Wow, what is all that madness?</p>

<p>Instead of printing each letter, we manipulate a variable that we called <code>counter</code>. This variable is special because it is followed by brackets <code>[ ]</code>, which makes it an <strong>associative array</strong>, a fancy way of calling a variable that stores key-value pairs.</p>

<p>In this case we chose the values of the first column <code>$1</code> to be the keys of the <code>counter</code> variable, which means there are 3 keys (&ldquo;a&rdquo;, &ldquo;b&rdquo; and &ldquo;c&rdquo;). The values are initialized to 0. For every line in the input, we add a 1 to the value in the array whose key is equal to <code>$1</code>. We use the addition operator <code>+=</code>, a shortcut for <code>counter[$1] = counter[$1] + 1</code>.</p>

<p>When all the lines are read, the <code>END</code> rule becomes true, and the code between the curly braces <code>{ }</code> is executed. The structure <code>for (key in associate_array) { some_code }</code> is called a <code>for</code> loop, and it executes <code>some_code</code> as many times as there are keys in the array. <code>letter</code> is the name that we chose for the variable that cycles through all the keys in <code>counter</code>, and <code>counter[letter]</code> gives the value stored in <code>counter</code> for each <code>letter</code> (which we we calculated in the previous curly brace chunk).</p>

<p>Now we can apply this to the real example:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk -F <span class="s2">&quot;\t&quot;</span> <span class="s1">&#39;$3 == &quot;exon&quot; { print $9 }&#39;</span> transcriptome.gtf <span class="p">|</span> <span class="se">\</span>
tr -d <span class="s2">&quot;;\&quot;&quot;</span> <span class="p">|</span> <span class="se">\</span>
awk -F <span class="s2">&quot; &quot;</span> <span class="s1">&#39;</span>
<span class="s1">$6 == &quot;protein_coding&quot; {</span>
<span class="s1">    gene_counter[$10] += 1</span>
<span class="s1">}</span>

<span class="s1">END {</span>
<span class="s1">    for (gene_name in gene_counter){</span>
<span class="s1">        print gene_name, gene_counter[gene_name]</span>
<span class="s1">    }</span>
<span class="s1">}&#39;</span> &gt; number_of_exons_by_gene.txt

head number_of_exons_by_gene.txt
CAPN6 24
ARL14EPL 3
DACH1 38
IFNA13 1
HSP90AB1 36
CAPN7 52
DACH2 84
IFNA14 1
LARS 188
CAPN8 78
</code></pre></div>
<p>If you are using the real transcriptome, it takes less than a minute to count up one million exons. Pretty impressive.</p>

<p>We saved the output to a file, so now we can use AWK to see how many genes are made up of a single exon.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk <span class="s1">&#39;$2 == 1&#39;</span> number_of_exons_by_gene.txt <span class="p">|</span> wc -l <span class="c"># 1362</span>
</code></pre></div>
<p>In the <a href="http://reasoniamhere.com/2013/09/18/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-3">next post</a> we will use AWK to translate old gene symbols into official HGNC gene symbols.</p>

        ]]></description>
      </item>
    
      <item>
        <title>AWK GTF! How to Analyze a Transcriptome Like a Pro - Part 1</title>
        <link>http://reasoniamhere.com/2013/09/16/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-1</link>
        <author>Nacho Caballero</author>
        <pubDate>2013-09-16T00:00:00-04:00</pubDate>
        <guid>http://reasoniamhere.com/2013/09/16/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-1</guid>
        <description><![CDATA[
           <p>This post belongs to a 3-part series on AWK: <strong>Part 1</strong> - <a href="http://reasoniamhere.com/2013/09/17/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-2">Part 2</a> - <a href="http://reasoniamhere.com/2013/09/18/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-3">Part 3</a></p>

<p>The goal of this tutorial is to show a few of the cool things that the Unix tool AWK can do with tabular data. We will focus on extracting useful information from a <a href="https://en.wikipedia.org/wiki/Transcriptome">transcriptome</a>—because bioinformatics is cool—, but AWK can do its wonders with any kind of text file.</p>

<p>The tutorial has been carefully designed to make it easy for you to play along. So feel free to copy and paste the commands in your Unix terminal.</p>

<!--excerpt-->

<h2>Get the data</h2>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># I recommend using this smaller file...</span>
wget https://raw.github.com/nachocab/nachocab.github.io/master/assets/transcriptome.gtf

<span class="c"># ...but if you&#39;re feeling bold, go ahead and download the whole enchilada</span>
wget ftp://ftp.sanger.ac.uk/pub/gencode/release_18/gencode.v18.annotation.gtf.gz
gzip -dc gencode.v18.annotation.gtf.gz &gt; transcriptome.gtf
</code></pre></div>
<p>Let&rsquo;s see what the file we just downloaded looks like.</p>

<pre><code class="wrap">head transcriptome.gtf

##description: evidence-based annotation of the human genome (GRCh37), version 18 (Ensembl 73)
##provider: GENCODE
##contact: gencode@sanger.ac.uk
##format: gtf
##date: 2013-09-02
chr1    HAVANA  gene    11869   14412   .   +   .   gene_id "ENSG00000223972.4"; transcript_id "ENSG00000223972.4"; gene_type "pseudogene"; gene_status "KNOWN"; gene_name "DDX11L1"; transcript_type "pseudogene"; transcript_status "KNOWN"; transcript_name "DDX11L1"; level 2; havana_gene "OTTHUMG00000000961.2";
chr1    HAVANA  transcript  11869   14409   .   +   .   gene_id "ENSG00000223972.4"; transcript_id "ENST00000456328.2"; gene_type "pseudogene"; gene_status "KNOWN"; gene_name "DDX11L1"; transcript_type "processed_transcript"; transcript_status "KNOWN"; transcript_name "DDX11L1-002"; level 2; tag "basic"; havana_gene "OTTHUMG00000000961.2"; havana_transcript "OTTHUMT00000362751.1";
chr1    HAVANA  exon    11869   12227   .   +   .   gene_id "ENSG00000223972.4"; transcript_id "ENST00000456328.2"; gene_type "pseudogene"; gene_status "KNOWN"; gene_name "DDX11L1"; transcript_type "processed_transcript"; transcript_status "KNOWN"; transcript_name "DDX11L1-002"; exon_number 1;  exon_id "ENSE00002234944.1";  level 2; tag "basic"; havana_gene "OTTHUMG00000000961.2"; havana_transcript "OTTHUMT00000362751.1";
</code></pre>

<p>Holy smokes. Who wrote that and why does he hate me?</p>

<p>That, my friend, is <a href="http://www.gencodegenes.org/releases/18.html">Gencode</a>&rsquo;s human transcriptome. It will seem less intimidating if we look at it one screen at a time</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">less -S transcriptome.gtf

<span class="c">##description: evidence-based annotation of the human genome (GRCh37), version 18 (Ensembl 73)</span>
<span class="c">##provider: GENCODE</span>
<span class="c">##contact: gencode@sanger.ac.uk</span>
<span class="c">##format: gtf</span>
<span class="c">##date: 2013-09-02</span>
chr1    HAVANA  gene    <span class="m">11869</span>   <span class="m">14412</span>   .   +   .   gene_id <span class="s2">&quot;ENSG00000223972.4&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000223972.4&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;DDX11L1&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;DDX11L1&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000000961.2&quot;</span><span class="p">;</span>
chr1    HAVANA  transcript  <span class="m">11869</span>   <span class="m">14409</span>   .   +   .   gene_id <span class="s2">&quot;ENSG00000223972.4&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENST00000456328.2&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;DDX11L1&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;processed_transcript&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;DDX11L1-002&quot;</span><span class="p">;</span> level 2<span class="p">;</span> tag <span class="s2">&quot;basic&quot;</span><span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000000961.2&quot;</span><span class="p">;</span> havana_transcript <span class="s2">&quot;OTTHUMT00000362751.1&quot;</span><span class="p">;</span>
chr1    HAVANA  exon    <span class="m">11869</span>   <span class="m">12227</span>   .   +   .   gene_id <span class="s2">&quot;ENSG00000223972.4&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENST00000456328.2&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;DDX11L1&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;processed_transcript&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;DDX11L1-002&quot;</span><span class="p">;</span> exon_number 1<span class="p">;</span>  exon_id <span class="s2">&quot;ENSE00002234944.1&quot;</span><span class="p">;</span>  level 2<span class="p">;</span> tag <span class="s2">&quot;basic&quot;</span><span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000000961.2&quot;</span><span class="p">;</span> havana_transcript <span class="s2">&quot;OTTHUMT00000362751.1&quot;</span><span class="p">;</span>
</code></pre></div>
<p>After calling <code>less</code>, you can move up, down, left and right by using the arrow keys. Type <code>shift g</code> to go to the end of the file, and <code>gg</code> to get back. Type <code>q</code> when you&rsquo;re done looking around.</p>

<p>The transcriptome has 9 columns. The first 8 are separated by tabs and look reasonable (chromosome, annotation source, feature type, start, end, score, strand, and phase), the last one is kind of hairy: it is made up of key-value pairs separated by semicolons, some fields are mandatory and others are optional, and the values are surrounded in double quotes. That&rsquo;s no way to live a decent life.</p>

<h2>Ask a question</h2>

<p>Imagine you wanted to get the list of all the protein-coding genes that only have one exon. How would you do it?</p>

<p>You could go learn Perl, or Python and write up a slow, 100-line-long script, but there is an easier way: use AWK. I <em>love</em> AWK. It is fast as a bullet, concise, and incredibly powerful. I couldn&rsquo;t live without it.</p>

<p>To use AWK, you need to understand three key ideas:</p>

<ol>
<li>AWK reads files <strong>one line at a time</strong></li>
<li>You can specify which lines should be read and which ones should be skipped by using a <strong>rule</strong></li>
<li>Once a line has been read, you can <strong>print text</strong> or <strong>do nothing</strong>.</li>
</ol>

<p>Let&rsquo;s try it with our example. Our first rule will make sure that column 3 is a gene:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk <span class="s1">&#39;$3 == &quot;gene&quot;&#39;</span> transcriptome.gtf <span class="p">|</span> head <span class="p">|</span> less -S

chr1    HAVANA  gene    <span class="m">11869</span>   <span class="m">14412</span>   .   +   .   gene_id <span class="s2">&quot;ENSG00000223972.4&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000223972.4&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;DDX11L1&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;DDX11L1&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000000961.2&quot;</span><span class="p">;</span>
chr1    HAVANA  gene    <span class="m">14363</span>   <span class="m">29806</span>   .   -   .   gene_id <span class="s2">&quot;ENSG00000227232.4&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000227232.4&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;WASH7P&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;WASH7P&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000000958.1&quot;</span><span class="p">;</span>
chr1    HAVANA  gene    <span class="m">29554</span>   <span class="m">31109</span>   .   +   .   gene_id <span class="s2">&quot;ENSG00000243485.2&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000243485.2&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;lincRNA&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;MIR1302-11&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;lincRNA&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;MIR1302-11&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000000959.2&quot;</span><span class="p">;</span>
chr1    HAVANA  gene    <span class="m">34554</span>   <span class="m">36081</span>   .   -   .   gene_id <span class="s2">&quot;ENSG00000237613.2&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000237613.2&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;lincRNA&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;FAM138A&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;lincRNA&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;FAM138A&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000000960.1&quot;</span><span class="p">;</span>
chr1    HAVANA  gene    <span class="m">52473</span>   <span class="m">54936</span>   .   +   .   gene_id <span class="s2">&quot;ENSG00000268020.2&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000268020.2&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;OR4G4P&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;OR4G4P&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000185779.1&quot;</span><span class="p">;</span>
chr1    HAVANA  gene    <span class="m">62948</span>   <span class="m">63887</span>   .   +   .   gene_id <span class="s2">&quot;ENSG00000240361.1&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000240361.1&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;OR4G11P&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;OR4G11P&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000001095.2&quot;</span><span class="p">;</span>
chr1    HAVANA  gene    <span class="m">69091</span>   <span class="m">70008</span>   .   +   .   gene_id <span class="s2">&quot;ENSG00000186092.4&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000186092.4&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;OR4F5&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;OR4F5&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000001094.1&quot;</span><span class="p">;</span>
chr1    HAVANA  gene    <span class="m">89295</span>   <span class="m">133566</span>  .   -   .   gene_id <span class="s2">&quot;ENSG00000238009.2&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000238009.2&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;lincRNA&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;RP11-34P13.7&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;lincRNA&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;RP11-34P13.7&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000001096.2&quot;</span><span class="p">;</span>
chr1    HAVANA  gene    <span class="m">89551</span>   <span class="m">91105</span>   .   -   .   gene_id <span class="s2">&quot;ENSG00000239945.1&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000239945.1&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;lincRNA&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;RP11-34P13.8&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;lincRNA&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;RP11-34P13.8&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000001097.2&quot;</span><span class="p">;</span>
chr1    HAVANA  gene    <span class="m">131025</span>  <span class="m">134836</span>  .   +   .   gene_id <span class="s2">&quot;ENSG00000233750.3&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000233750.3&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;CICP27&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;CICP27&quot;</span><span class="p">;</span> level 1<span class="p">;</span> tag <span class="s2">&quot;pseudo_consens&quot;</span><span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000001257.3&quot;</span><span class="p">;</span>
</code></pre></div>
<p>Rules go between single quotes. Numbers after the dollar sign specify a column, so <code>$3</code> refers to column 3. The only exception is <code>$0</code>, which specifies the entire line.</p>

<p>The double equals sign <code>==</code> is how computer people write equality, it drives the math people crazy.</p>

<p>Character strings, like the word &ldquo;gene&rdquo;, must be surrounded by double quotes.</p>

<p>The vertical line <code>|</code> is called a pipe. It connects the command on the left of the pipe with the command on the right. This tells the output generated by the command at the left to become the input of the command on the right.</p>

<p>Now that we have used column 3 to filter, we don&rsquo;t really care about any of the information in columns 1 through 8, so we can get rid of it by only printing column 9.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk <span class="s1">&#39;$3 == &quot;gene&quot; { print $9 }&#39;</span> transcriptome.gtf <span class="p">|</span> head <span class="p">|</span> less -S

gene_id
gene_id
gene_id
gene_id
gene_id
gene_id
gene_id
gene_id
gene_id
gene_id
</code></pre></div>
<p>It worked, sort of. We used the stuff that comes before the braces to select the lines that we care about, and the stuff that goes inside the braces <code>{ }</code> to tell AWK what we want it to do with that line—in this case, print column 9—, but only <code>gene_id</code> showed up. What happened to the rest?</p>

<h2>What is a column?</h2>

<p>By default, AWK uses whitespace as the delimiter between columns but there are two types of whitespace: spaces and tabs. Check this out:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s2">&quot;a b c&quot;</span> <span class="p">|</span> awk <span class="s1">&#39;{ print $2 }&#39;</span>

<span class="nb">echo</span> <span class="s2">&quot;a\tb\tc&quot;</span> <span class="p">|</span> awk <span class="s1">&#39;{ print $2 }&#39;</span>
</code></pre></div>
<p>Both commands return a <code>b</code>. We are using <code>echo</code> to send AWK a line of text (instead of reading from a file), and telling AWK to print the second column. In the second example we are separating the columns by tabs (<code>\t</code> is the special character for tabs) instead of spaces. We can tell AWK to treat spaces and tabs differently by using the <code>-F</code> option followed by a space and a character in double quotes.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s2">&quot;a,b,c&quot;</span> <span class="p">|</span> awk -F <span class="s2">&quot;,&quot;</span> <span class="s1">&#39;{ print $2 }&#39;</span> <span class="c"># separate by commas, returns b</span>

<span class="nb">echo</span> <span class="s2">&quot;a b c&quot;</span> <span class="p">|</span> awk -F <span class="s2">&quot;\t&quot;</span> <span class="s1">&#39;{ print $2 }&#39;</span> <span class="c"># separate by tabs, returns nothing</span>

<span class="nb">echo</span> <span class="s2">&quot;a\tb\tc&quot;</span> <span class="p">|</span> awk -F <span class="s2">&quot;\t&quot;</span> <span class="s1">&#39;{ print $2 }&#39;</span> <span class="c"># separate by tabs, returns b</span>
</code></pre></div>
<p>It&rsquo;s not very intuitive that <code>-F</code> would define what the separator should be, and everybody forgets when they start learning AWK. Luckily, it&rsquo;s easy to find help.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">man awk
</code></pre></div>
<p>This takes you to the Unix manual page on AWK, which behaves in a similar way as <code>less</code>. You can use the arrows to move around and you can search for words using the slash <code>/</code> followed by whatever you are looking for. Type <code>/-F</code> and press <code>Enter</code>. The screen will advance to the usage line:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk <span class="o">[</span> -F fs <span class="o">]</span> <span class="o">[</span> -v <span class="nv">var</span><span class="o">=</span>value <span class="o">]</span> <span class="o">[</span> <span class="s1">&#39;prog&#39;</span> <span class="p">|</span> -f progfile <span class="o">]</span> <span class="o">[</span> file ...  <span class="o">]</span>
</code></pre></div>
<p>which contains <code>-F</code>, to move to the next occurrence, press <code>n</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">The -F fs option defines the input field separator to be the regular expression fs.
</code></pre></div>
<p>Bingo. You can go back to the previous occurrence by pressing <code>shift n</code>. Press <code>q</code> to leave.</p>

<p>AWK didn&rsquo;t return anything back in the <code>echo &quot;a b c&quot;</code> example, why? Because it didn&rsquo;t find any tabs, so it only saw one column, which means that there was no second column to print. See for yourself:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s2">&quot;a b c&quot;</span> <span class="p">|</span> awk -F <span class="s2">&quot;\t&quot;</span> <span class="s1">&#39;{ print $1 }&#39;</span> <span class="c"># a b c</span>
</code></pre></div>
<p>Back to the genes.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">awk -F <span class="s2">&quot;\t&quot;</span> <span class="s1">&#39;$3 == &quot;gene&quot; { print $9 }&#39;</span> transcriptome.gtf <span class="p">|</span> head <span class="p">|</span> less -S

gene_id <span class="s2">&quot;ENSG00000223972.4&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000223972.4&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;DDX11L1&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;DDX11L1&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000000961.2&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000227232.4&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000227232.4&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;WASH7P&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;WASH7P&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000000958.1&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000243485.2&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000243485.2&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;lincRNA&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;MIR1302-11&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;lincRNA&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;MIR1302-11&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000000959.2&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000237613.2&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000237613.2&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;lincRNA&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;FAM138A&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;lincRNA&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;FAM138A&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000000960.1&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000268020.2&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000268020.2&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;OR4G4P&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;OR4G4P&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000185779.1&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000240361.1&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000240361.1&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;OR4G11P&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;OR4G11P&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000001095.2&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000186092.4&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000186092.4&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;OR4F5&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;protein_coding&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;OR4F5&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000001094.1&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000238009.2&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000238009.2&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;lincRNA&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;RP11-34P13.7&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;lincRNA&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;RP11-34P13.7&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000001096.2&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000239945.1&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000239945.1&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;lincRNA&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;RP11-34P13.8&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;lincRNA&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;NOVEL&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;RP11-34P13.8&quot;</span><span class="p">;</span> level 2<span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000001097.2&quot;</span><span class="p">;</span>
gene_id <span class="s2">&quot;ENSG00000233750.3&quot;</span><span class="p">;</span> transcript_id <span class="s2">&quot;ENSG00000233750.3&quot;</span><span class="p">;</span> gene_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> gene_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> gene_name <span class="s2">&quot;CICP27&quot;</span><span class="p">;</span> transcript_type <span class="s2">&quot;pseudogene&quot;</span><span class="p">;</span> transcript_status <span class="s2">&quot;KNOWN&quot;</span><span class="p">;</span> transcript_name <span class="s2">&quot;CICP27&quot;</span><span class="p">;</span> level 1<span class="p">;</span> tag <span class="s2">&quot;pseudo_consens&quot;</span><span class="p">;</span> havana_gene <span class="s2">&quot;OTTHUMG00000001257.3&quot;</span><span class="p">;</span>
</code></pre></div>
<p>Now we have all the genes, but how do we filter for protein-coding genes? The answer, in <a href="http://reasoniamhere.com/2013/09/17/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-2">Part 2</a>.</p>

        ]]></description>
      </item>
    
  </channel>
</rss>